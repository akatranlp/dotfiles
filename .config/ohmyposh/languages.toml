  # Docker segment
  [[blocks.segments]]
    template = "via <b><blue>ïŒˆ  {{ .Context }}</></b>"
    foreground = 'white'
    background = 'transparent'
    type = 'docker'
    style = 'plain'


  # Golang segment
  [[blocks.segments]]
    template = "via <b><cyan>î˜§ v{{ .Full }}</></b>"
    foreground = 'white'
    background = 'transparent'
    type = 'go'
    style = 'plain'

    [blocks.segments.properties]
      display_mode = 'context'
      extensions = [ '*.go', 'go.mod', 'go.work' ]

  # NodeJS segment
  [[blocks.segments]]
    template = "via <b>{{ if .Mismatch }}<red>{{ else }}<green>{{ end }}îœ˜ v{{ .Full }}</></b>"
    foreground = 'white'
    background = 'transparent'
    type = 'node'
    style = 'plain'

    [blocks.segments.properties]
      display_mode = 'context'
      extensions = [ '*.ts', '*.mts', '*.cts', '*.js', '*.mjs', '*.cjs', 'package.json', '.nvmrc', '.node-version' ]
      folders = [ 'node_modules' ]

  # Python segment
  [[blocks.segments]]
    template = "via <b><yellow>îˆµ  v{{ .Full }}{{ if .Venv }}({{ .Venv }}){{ end }}</></b>"
    foreground = 'white'
    background = 'transparent'
    type = 'python'
    style = 'plain'
    [blocks.segments.properties]
      display_mode = 'context'
      extensions = [ '*.py', '*.ipynb', 'pyproject.toml', 'requirements.txt', 'setup.py', '.python-version' ]
      folders = [ 'venv', '.venv' ]

  # Rust segment
  [[blocks.segments]]
    template = "via <b><red>îž¨ v{{ .Full }}</></b>"
    # template = "via <b><red>ðŸ¦€ v{{ .Full }}</></b>"
    foreground = 'white'
    background = 'transparent'
    type = 'rust'
    style = 'plain'

    [blocks.segments.properties]
      display_mode = 'context'
      extensions = [ '*.rs', 'Cargo.toml' ]

  # Zig segment
  [[blocks.segments]]
    template = "via <b><yellow>îš© v{{ .Full }}</></b>"
    foreground = 'white'
    background = 'transparent'
    type = 'zig'
    style = 'plain'

    [blocks.segments.properties]
      display_mode = 'context'
      extensions = [ '*.zig', '*.zon' ]

